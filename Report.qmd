---
title: "Data Model SPZ"
format: html
editor: visual
---

```{r}
library(knitr)
library(readxl)
library(dplyr)
library(ggplot2)
library(gt)

setwd("C:/Users/boris/Desktop/data hospital")

#We upload data
codes <- read_excel("codes_2phases.xlsx")
head(codes)

# SCIM values 2017-2020
SCIM_17_20 <- read_excel("Auswertung_SCIM_2017-20201.xlsx")

colnames(SCIM_17_20)
# We convert the patient code to character

SCIM_17_20<-SCIM_17_20 %>% mutate(FID=as.character(FID))
head(SCIM_17_20)

```

From the previous data set we need to know that the key variable that identifies every row is the column FID. Note that FID means case identification number.

-   FID: Fallidentifikationsnummer

```{r}
SCIM_17_20 %>% select(FID)%>%table() %>%data.frame()%>%select(Freq)%>% table()

```

From the last outcome we observe that there are FID repeated at most twice. It probably means two different SCIM values. In fact Let's select the first five FID values.

```{r}
fives<-SCIM_17_20 %>% select(FID)%>%table() %>%data.frame()%>% head(n=5) %>% select(FID)

fives

SCIM_17_20 %>% filter(FID %in% fives$FID)%>%select(FID,SCIM_TOTAL,DATUM) %>% arrange(FID,DATUM)

```

# Analysis two phases

Here we consider the dataset codes, remember that the data set codes has two columns code1 and code2. Both codes are equivalent, it means that correspond to the same patient, but for different phases. Therefore, is important keep in mind this feature because based on these codes we will analyze the evolution of SCIM values.

-   code 1: Acute Phase
-   code 2: Rehabilitation Phase

```{r}
head(codes)


```

Additionally, is crucial to note that:

\- There are not duplicated values in the table $codes$

\- There are duplicated FID in the table $SCIM\_17\_20.$

# Information about patients, diagnosis and treatments.

In this stage we consider two additional data sets.

The \bf{mb} is the dataset with information about health diagnosis, treatments, age, sex among others. The data set \*fid_pid\* is a data set that contains a correspondence between FID and PID.

-   PID: Patienten fallnummer that is the patient case number.

```{r}

mb<-readRDS("C:/Users/boris/Desktop/SPZ hospital/SPZ-Project/mb.rds")
colnames(mb)<-c(colnames(mb)[1:4],"stay_ICU",colnames(mb)[5:6],"cost_payer",colnames(mb)[9:31])
fid_pid <-  readRDS("C:/Users/boris/Desktop/SPZ hospital/SPZ-Project/fidpid.rds")
head(mb)
fid_pid%>%select(PID)%>%table()%>%data.frame()%>%select(Freq)%>% table()

colnames(mb)
colnames(fid_pid)
```

# Variables time and cost of interventions

We include variables that represent the time and cost for each intervention to every patient

```{r}
time_cost<-readRDS("time_cost.rds")
serv_cons<-time_cost%>% select(-year) %>% group_by(id) %>% 
  summarize(op_room=sum(op_room),anaest=sum(anaest),int_care=sum(int_care),imag=sum(imag),lab=sum(lab),physt=sum(physt),ergo=sum(ergo),logo=sum(logo),non_med=sum(non_med_ter),nurs=sum(nurs),psyc=sum(psyc))%>% tail()

```

The units are given by:

```{r}
  unts<-c("min","min","min","chf","chf","min","min","min","tp","min","tp")
  unts
```

Summarizing, we have the next important data sets.

-   mb

-   codes

-   SCIM_17_20

-   fid_pid

-   time_cost

# Evolution of SCIM

```{r}
SCIM_17_20 %>% select(FID) %>% table() %>% data.frame()%>% arrange(-Freq)%>%head(n=5)

mb%>% select(id) %>% table() %>% data.frame()%>%arrange(-Freq) %>% head(n=5)

time_cost %>% select(id) %>% table() %>% data.frame() %>% arrange(-Freq) %>% head(n=8)

fid_pid %>% select(FID) %>% table() %>% data.frame()%>% arrange(-Freq) %>% head(n=8)

fid_pid %>% select(PID) %>% table() %>% data.frame()%>% arrange(-Freq) %>% head(n=8)
```

From the previous summaries we observe that in the table *fip_pid*, there are some *PID* codes repeated $16$ times. It means that the patient considered was \$16\$ times in the clinic, each time with a different FID code.

```{r}
fid_pid |> filter(PID=="0152021")

fid_pid |> filter(PID=="0152021") |> select(FID) |> unique() |> nrow()

```

In order to analyze the evolution of the SCIM value we consider the next steps.

Due to the importance of track the acute and rehabilitation phase we merge the mb dataset with codes. Note that an important issue could be the treatment of the codes for acute and rehabilitation phase. In order to deal with that we proceed as follows:

```{r}
# We create a code uni_n in the codes table
codes$uniq<-paste("uni",1:nrow(codes),sep="_")
head(codes,n=10)
SCIM_17_20 %>% select(FID) %>% unique() %>% nrow()

# Note that when we merge SCIM_17_20 with codes not all codes match, because
# not all of them were in two phases

SCIM_17_20 %>% select(FID) %>% 
  merge(codes%>%mutate(ph="acute"),by.x="FID",by.y="code1") %>% nrow()
#1638 matches in acute phase

# Merge with code 1 acute phase
P1 <- SCIM_17_20  %>% 
  merge(codes,by.x="FID",by.y="code1",all.x=TRUE)

head(P1)

# Merge with code 2 rehabilitation phase

P2 <- P1 %>% merge(codes,by.x="FID",by.y="code2",all.x=TRUE)
 
# For example
head(P2[c(71,72,73,74,449,450,451,452),])
```

If everything is ok, when uniq.x has any value uni.y should be with \<NA\> and viceversa. The next chunk evaluates if both columns uniq.x and uniq.y are not empty at the same time.

```{r}
P2 %>% filter(uniq.x!=""&uniq.y!="")
## 0 rows has both values empty at the same time

P2$uniq.x<-ifelse(is.na(P2$uniq.x),"",P2$uniq.x)
P2$uniq.y<-ifelse(is.na(P2$uniq.y),"",P2$uniq.y)

P2$unique<-paste(P2$uniq.x,P2$uniq.y,sep="")
head(P2)

P2$acute<-ifelse(P2$uniq.x=="","","acute")
P2$rehab<-ifelse(P2$uniq.y=="","","rehab")

P2$phase<-paste(P2$acute,P2$rehab,sep="")

P3<-P2%>% select(unique,FID,code1,code2,phase,SCIM_TOTAL)
head(P2)
head(P3)
tabl<-table(P3$unique)%>% data.frame() %>% arrange(-Freq)
head(tabl)
P3%>%filter(unique %in% tabl[-1,]$Var1) %>% merge(fid_pid,by.x="FID",by.y="FID")%>% arrange(PID,unique)%>% head(n=20)
P4<-P3%>%filter(!is.na(FID))
#merge(P4,fid_pid,by.x="FID",by.y="FID") %>% select(PID) %>% table() %>% data.frame()
```

```{r}
P4%>% colnames()
head(P4)


P5<-P3%>%filter(!is.na(FID))%>%merge(P4,fid_pid,by.x="FID",by.y="FID")

head(P5)
```

```{r}
mb %>% select(id) |> table() |> data.frame() |> filter(Freq==2) |> head(n=15)

mb |> filter(id=="6006658")

codes %>% filter(code2=="6006658")

mb |> filter(id%in% c("6004319","6006658"))

mb2<-mb |> merge(fid_pid,by.x = "id",by.y="FID",all.x=TRUE)

mb3<-mb2 |> merge(codes,by.x="id",by.y="code1",all.x=TRUE) |> 
  merge(codes,by.x="id",by.y="code2",all.x=TRUE) %>% mutate(acute=ifelse(!is.na(code2),"reha",""))|>
  mutate(rehab=ifelse(!is.na(code1),"acute","")) %>% mutate(phase=paste(acute,rehab,sep="")) %>% select(-acute,-rehab) %>% arrange(PID)

mb3|> filter(phase=="acute")

tfp<-fid_pid %>% select(PID) %>% table %>% data.frame() %>% arrange(-Freq)
mb3 %>% filter(PID %in% tfp$PID)
mb3 %>% filter(PID=="0152021")
mb3 %>% select(PID) %>% table()%>%data.frame() %>% arrange(-Freq) %>% head(20)
mb3 %>% select(PID,id,entry_date,phase)
ids<-mb3 |> filter(PID=="0019699") %>% select(id)
fids<-SCIM_17_20 %>% filter(FID %in% ids$id) %>% arrange(DATUM) %>% select(FID)



cpth<-readRDS("C:/Users/boris/Desktop/data hospital/cpth.rds")
ind_cpth <- read_excel("C:/Users/boris/Desktop/data hospital/ind_cpth.xlsx")
mb4<-mb3 %>% merge(cpth,by.x="id",by.y="V1") %>%
  merge(ind_cpth,by.x="clipath_code",by.y="Indication") 


setwd("C:/Users/boris/Desktop/SPZ hospital/SPZ-Project")



```

# Dataset serv_cons

serv_cons: contains the aggregated information of FID and units of interventions:

```{r}
head(serv_cons)
```

Now, we identify the phases for every id in the previous table:

The first part merge by id and code1 (acute phase) to obtain uniq code and aggregate, the second part the same procedure but with code2 (rehab phase)

```{r}
serv_cons1<-serv_cons%>% merge(codes%>% select(code1,uniq),by.x="id",by.="code1") %>%
  merge(fid_pid,by.x="id",by.y="FID") %>% mutate(phase="acu")

serv_cons2<-serv_cons%>% merge(codes%>% select(code2,uniq),by.x="id",by.="code2") %>%
  merge(fid_pid,by.x="id",by.y="FID") %>% mutate(phase="rehab")


serv_cons_phase<-rbind(serv_cons1,serv_cons2)
colnames(serv_cons_phase)
# We see the number of times that every FID appears in the table and phase
serv_cons_phase %>% select(PID) %>% 
  table() %>% data.frame() %>% head() %>% arrange(-Freq) |> head()

# We check the first code 

serv_cons_phase |> filter(PID=="0000374") %>% select(c(1,"PID",2,3,4,15,"uniq"))

```

# Lesion Level

```{r}
readxl::read_excel("lesion_level.xlsx")
```
